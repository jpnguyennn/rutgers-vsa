generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model BoardMember {
  id            Int     @id @default(autoincrement())
  positional_id Int
  full_name     String
  position      String
  photo_url     String
  facebook      String?
  instagram     String?
  vsa_email     String
  year          Int?
  major         String?
  why_vsa       String?
  minor         String?
}

model Intern {
  id        Int     @id @default(autoincrement())
  full_name String
  photo_url String
  facebook  String?
  instagram String?
  year      Int?
  major     String?
}

model GalleryItem {
  id         Int       @id @default(autoincrement())
  event_name String
  event_date DateTime?
  event_desc String?
  thumbnail  String
  semester   String
  location   String?
}

model UpcomingEvent {
  id         Int       @id @default(autoincrement())
  event_name String
  event_date DateTime?
  location   String?
  event_desc String?
  thumbnail  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
